params {
	

	// WORKFLOW PARAMETERS TO REVIEW AT EACH RUN
	// ----------------------------------------

	// Path to locally stored FASTA to search. NOTE: If a local FASTA
	// is supplied, the pipeline will not download a new package from
	// the NCBI server.
	fasta_path = ""

	// Path to locally stored metadata associated with the above FASTA
	metadata_path = ""

	// Date range to search for prolonged infections within. Must be for-
	// matted like "1996-09-28"
	min_date = "none"
	max_date = new java.util.Date().format('yyyy-MM-dd').toString()

	// U.S. State or Canadian province to search within
	geography = "USA"

	// Comma-separated list of pathogens of interest to be downloaded from GenBank
	pathogen = "SARS-CoV-2"

	// Set the parameter `download_only` to true if you only wish to download pathogen data
	download_only = false

	// Whether to use pango lineages in NCBI metadata instead of re-
	// classifying with pangolin
	search_metadata_dates = true

	// Whether to run date comparison with Pangolin re-calling and Outbreak.info
	reclassify_sc2_lineages = false

	// path to GISAID token for outbreak.info (use `authenticateUser()` in R)
	gisaid_token = "$launchDir/config/.R_outbreak-info-token"

	// Whether to construct a distance matrix to identify evolutionarily advanced
	// viruses
	make_distance_matrix = true

	// Distance matrix identity threshold. Our default is 0.999, which, for a 
	// 30,000 nucleotide genome like SARS-CoV-2's, allows up to 30 mismatches
	// between the viruses in each cluster.
	id_threshold = 0.999

	// Retention strictness ('strict', intermediate', or 'lenient')
	strictness_mode = 'strict'

	// Random seed
	seed = 14
	
	// Where to place results
	results = "$launchDir/results"
	
	// How many days past lineage designation to consider an infection prolonged
	days_of_infection = 240

	// ----------------------------------------
	

	
	// WORKFLOW PARAMETERS THAT SHOULD NOT BE CHANGED
	// ----------------------------------------

	// resources folder
	resources = "$baseDir/resources"

	// SARS-CoV-2 Gene Map
	sc2_gff = "https://raw.githubusercontent.com/nextstrain/nextclade_data/master/data/datasets/sars-cov-2/references/MN908947/versions/2021-10-11T19%3A00%3A32Z/files/genemap.gff"

	// maximum number of ambiguous bases in the assessed consensus sequences
	max_ambiguity = 0.1
	
	// date for results tagging
	date = new java.util.Date().format('yyyyMMdd')

	// Find number of CPUs on system or node
	available_cpus = Runtime.getRuntime().availableProcessors() - 1

	// Find the maximum number of cpus to allocate for local execution that
	// is not on an HPC cluster
	max_shared_cpus = Math.floor( Runtime.getRuntime().availableProcessors() / 4 )

	// Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '16.GB'
    max_time                   = '240.h'

	// ----------------------------------------
	

}


// WHETHER TO GENERATE A REPORT OF RUN STATISTICS
report {
	enabled = true
	overwrite = true
	file    = "${params.results}/pipeline_run_info/finder-run-report.html"
}


// WHETHER TO GENERATE A VISUALIZATION OF THE WORKFLOW
dag {
	enabled = true
	overwrite = true
	file = "${params.results}/pipeline_run_info/long-infection-finder.png"
}


// WHETHER TO REMOVE TEMPORARY FILES AFTER A SUCCESSFUL RUN
cleanup = false

// Function to ensure that memory requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


// PROFILE OPTIONS
profiles {

	debug { process.beforeScript = 'echo $HOSTNAME' }
	
	standard {
		
		docker.enabled = true
		docker.temp = 'auto'
		singularity.enabled = false
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_CONTAINER {
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:DOWNLOAD_NCBI_PACKAGE {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_METADATA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withLabel: "lif_container" {
				container = "nrminor/long-infection-finder:v3.1"
			}
			// withName:FILTER_BY_MASKED_BASES {
			// 	memory = { check_max( 12.GB * task.attempt, 'memory' ) }
			// }
			withName:DOWNLOAD_REFSEQ {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:RECLASSIFY_SC2_WITH_PANGOLIN {
				container = "staphb/pangolin:latest"
			}

		}
		
	}

	local_path {

		docker.enabled = false
		singularity.enabled = false
		conda.enabled = false
		process.executor = 'local'

	}
	
	docker {
		
		docker.enabled = true
		docker.temp = 'auto'
		singularity.enabled = false
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_CONTAINER {
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:DOWNLOAD_NCBI_PACKAGE {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_METADATA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withLabel: "lif_container" {
				container = "nrminor/long-infection-finder:v3.1"
			}
			// withName:FILTER_BY_MASKED_BASES {
			// 	memory = { check_max( 12.GB * task.attempt, 'memory' ) }
			// }
			withName:DOWNLOAD_REFSEQ {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:RECLASSIFY_SC2_WITH_PANGOLIN {
				container = "staphb/pangolin:latest"
			}

		}
		
	}
	
	singularity {
		
		docker.enabled = false
		singularity.enabled = true
		singularity.cacheDir = "work/singularity/"
		singularity.autoMounts = true
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_CONTAINER {
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:DOWNLOAD_NCBI_PACKAGE {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_METADATA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withLabel: "lif_container" {
				container = "nrminor/long-infection-finder:v3.1"
			}
			// withName:FILTER_BY_MASKED_BASES {
			// 	memory = { check_max( 12.GB * task.attempt, 'memory' ) }
			// }
			withName:DOWNLOAD_REFSEQ {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:RECLASSIFY_SC2_WITH_PANGOLIN {
				container = "staphb/pangolin:latest"
			}

		}
		
	}

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


// MANIFEST
manifest {
	homePage = 'github.com/dholab/alpine'
	mainScript = 'main.nf'
	defaultBranch = 'main'
	description = 'Workflow for discovering SARS-CoV-2 prolonged infection candidates in a public sequence repositories'
	author = 'Nicholas R. Minor'
}
