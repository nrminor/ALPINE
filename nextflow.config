params {
	

	// WORKFLOW PARAMETERS TO REVIEW AT EACH RUN
	// ----------------------------------------

	// Path to locally stored FASTA to search. NOTE: If a local FASTA
	// is supplied, the pipeline will not download a new package from
	// the NCBI server.
	fasta_path = ""

	// Path to locally stored metadata associated with the above FASTA
	metadata_path = ""

	// Date range to search for prolonged infections within. Must be for-
	// matted like "1996-09-28"
	min_date = ""
	max_date = ""

	// U.S. State or Canadian province to search within
	geography = "USA"

	// Pathogen of interest to be downloaded from GenBank
	pathogen = "SARS-CoV-2"

	// Whether to use pangolin to reclassify sequences with the latest
	// version
	update_pango = false

	// Whether to use pango lineages in NCBI metadata instead of re-
	// classifying with pangolin
	inspect_ncbi_metadata = false

	// Whether to run date comparison
	compare_lineage_dates = false

	// Whether to construct a distance matrix to identify evolutionarily advanced
	// viruses
	make_distance_matrix = true

	// Distance matrix identity threshold. Our default is 0.999, which, for a 
	// 30,000 nucleotide genome like SARS-CoV-2's, allows up to 30 mismatches
	// between the viruses in each cluster.
	id_threshold = 0.999

	// Random seed
	seed = 14

	// Whether to run in "low disk mode". If this is set to true, large or 
	// intermediate files will be symlinked into the results directory rather 
	// than being copied. If this workflow is being run on an HPC cluster or 
	// other well-resourced compute infrastructure, we recommend leaving this 
	// as false.
	low_disk_mode = false
	
	// Where to place results
	results = "$launchDir/results"
	
	// How many days past lineage designation to consider an infection prolonged
	days_of_infection = 240

	// The minimum number of days of infection required to download a FASTA sequence
	duration_of_interest = 600
	// ----------------------------------------
	

	
	// WORKFLOW PARAMETERS THAT SHOULD NOT BE CHANGED
	// ----------------------------------------
	// resources folder
	resources = "$baseDir/resources"
	
	// date for results tagging
	date = new java.util.Date().format('yyyyMMdd')

	// Find number of CPUs on system or node
	available_cpus = Runtime.getRuntime().availableProcessors() - 1

	// Find the maximum number of cpus to allocate for local execution that
	// is not on an HPC cluster
	max_shared_cpus = Math.floor( Runtime.getRuntime().availableProcessors() / 4 )

	// ----------------------------------------
	

}


// WHETHER TO GENERATE A REPORT OF RUN STATISTICS
report {
	enabled = true
	overwrite = true
	file    = "${params.results}/pipeline_run_info/finder-run-report.html"
}


// WHETHER TO GENERATE A VISUALIZATION OF THE WORKFLOW
dag {
	enabled = true
	overwrite = true
	file = "${params.results}/pipeline_run_info/long-infection-finder.png"
}


// WHETHER TO REMOVE TEMPORARY FILES AFTER A SUCCESSFUL RUN
cleanup = false


// PROFILE OPTIONS
profiles {

	debug { process.beforeScript = 'echo $HOSTNAME' }
	
	standard {
		
		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_CONTAINER {
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:DOWNLOAD_NCBI_PACKAGE {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_METADATA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_FASTA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withLabel: "lif_container" {
				container = "nrminor/long-infection-finder:v1.6"
			}
			withName:DOWNLOAD_REFSEQ {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:BUILD_CENTROID_TREE {
				container = "staphb/iqtree:1.6.7"
			}
			withName:GENERATE_CLUSTER_REPORT {
				container = "nrminor/lif-report-generation:v1.0"
			}
			withName:HIGH_THROUGHPUT_PANGOLIN {
				container = "staphb/pangolin:latest"
			}
			withName:CONCAT_PANGOLIN_REPORTS {
				container = "nrminor/nf-r:28141"
			}
			withName:FIND_CANDIDATE_LINEAGES_BY_DATE {
				container = "nrminor/nf-r:28141"
			}
			withName:FILTER_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:SEARCH_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:COLLATE_NCBI_METADATA_CANDIDATES {
				container = "nrminor/nf-r:28141"
			}

		}
		
	}

	local_path {

		docker.enabled = false
		singularity.enabled = false
		conda.enabled = false
		process.executor = 'local'

	}

	chtc {

		docker.enabled = false
		singularity.enabled = true
		conda.enabled = false

		executor {

			name = 'local'
			cpus = 32
			memory = 32.GB

			}

		process {
			
			withName:UPDATE_PANGO_CONTAINER {
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:DOWNLOAD_NCBI_PACKAGE {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_METADATA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_FASTA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withLabel: "lif_container" {
				container = "nrminor/long-infection-finder:v1.6"
			}
			withName:DOWNLOAD_REFSEQ {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:BUILD_CENTROID_TREE {
				container = "staphb/iqtree:1.6.7"
			}
			withName:GENERATE_CLUSTER_REPORT {
				container = "nrminor/nf-r:28141"
			}
			withName:HIGH_THROUGHPUT_PANGOLIN {
				container = "staphb/pangolin:latest"
			}
			withName:CONCAT_PANGOLIN_REPORTS {
				container = "nrminor/nf-r:28141"
			}
			withName:FIND_CANDIDATE_LINEAGES_BY_DATE {
				container = "nrminor/nf-r:28141"
			}
			withName:FILTER_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:SEARCH_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:COLLATE_NCBI_METADATA_CANDIDATES {
				container = "nrminor/nf-r:28141"
			}

		}
			
	}
	
	docker {
		
		docker.enabled = true
		singularity.enabled = false
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_CONTAINER {
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:DOWNLOAD_NCBI_PACKAGE {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_METADATA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_FASTA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withLabel: "lif_container" {
				container = "nrminor/long-infection-finder:v1.6"
			}
			withName:DOWNLOAD_REFSEQ {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:BUILD_CENTROID_TREE {
				container = "staphb/iqtree:1.6.7"
			}
			withName:GENERATE_CLUSTER_REPORT {
				container = "nrminor/nf-r:28141"
			}
			withName:HIGH_THROUGHPUT_PANGOLIN {
				container = "staphb/pangolin:latest"
			}
			withName:CONCAT_PANGOLIN_REPORTS {
				container = "nrminor/nf-r:28141"
			}
			withName:FIND_CANDIDATE_LINEAGES_BY_DATE {
				container = "nrminor/nf-r:28141"
			}
			withName:FILTER_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:SEARCH_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:COLLATE_NCBI_METADATA_CANDIDATES {
				container = "nrminor/nf-r:28141"
			}

		}
		
	}
	
	singularity {
		
		docker.enabled = false
		singularity.enabled = true
		conda.enabled = false
		
		process {
			
			withName:UPDATE_PANGO_CONTAINER {
				container = "staphb/pangolin:latest"
				docker.runOptions = '--pull=always'
			}
			withName:DOWNLOAD_NCBI_PACKAGE {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_METADATA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:UNZIP_NCBI_FASTA {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withLabel: "lif_container" {
				container = "nrminor/long-infection-finder:v1.6"
			}
			withName:DOWNLOAD_REFSEQ {
				container = "biocontainers/ncbi-datasets-cli:14.2.2_cv2"
			}
			withName:BUILD_CENTROID_TREE {
				container = "staphb/iqtree:1.6.7"
			}
			withName:GENERATE_CLUSTER_REPORT {
				container = "nrminor/nf-r:28141"
			}
			withName:HIGH_THROUGHPUT_PANGOLIN {
				container = "staphb/pangolin:latest"
			}
			withName:CONCAT_PANGOLIN_REPORTS {
				container = "nrminor/nf-r:28141"
			}
			withName:FIND_CANDIDATE_LINEAGES_BY_DATE {
				container = "nrminor/nf-r:28141"
			}
			withName:FILTER_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:SEARCH_NCBI_METADATA {
				container = "nrminor/nf-r:28141"
			}
			withName:COLLATE_NCBI_METADATA_CANDIDATES {
				container = "nrminor/nf-r:28141"
			}

		}
		
	}
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


// MANIFEST
manifest {
	homePage = 'https://github.com/dholab/long-infection-finder'
	mainScript = 'long-infection-finder.nf'
	defaultBranch = 'main'
	description = 'Workflow for discovering SARS-CoV-2 prolonged infection candidates in a INSDC repository'
	author = 'Nicholas R. Minor'
}
